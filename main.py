import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters.command import Command
from cbr import CBRFetcher
from profinance import ProFinanceFetcher
from rapira import RapiraFetcher
from invest_rep import InvestingFetcher
import threading


# –í–∞—à Telegram —Ç–æ–∫–µ–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = "TOKEN"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()  
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìâ Rates")] 
    ],
    resize_keyboard=True
)

investing_fetcher = InvestingFetcher()
async def get_all_rates():
    cbr_fetcher = CBRFetcher()
    profinance_fetcher = ProFinanceFetcher()
    abcex_fetcher = RapiraFetcher()


    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    cbr_rate, profinance_rate, abcex_rate = await asyncio.gather(
        cbr_fetcher.fetch_exchange_rate(),
        profinance_fetcher.fetch_exchange_rate(),
        abcex_fetcher.fetch_exchange_rate(),
    )
    investing_rate = investing_fetcher.get_last_numeric()

    print(abcex_rate, cbr_rate, profinance_rate, investing_rate)

    try:
        abcex_rate = float(abcex_rate)
        cbr_rate = float(cbr_rate)
        profinance_rate = float(profinance_rate)
        investing_rate = float(investing_rate)

    except ValueError:
        return "‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–∑ –∫—É—Ä—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –æ—Ç Abcex
    cbr_spread = ((abcex_rate - cbr_rate) / abcex_rate) * 100
    profinance_spread = ((abcex_rate - profinance_rate) / abcex_rate) * 100
    investing_spread = ((abcex_rate - investing_rate) / abcex_rate) * 100
    message = f"""
üìä *Rates Summary* üìà

üîπ *Rapira rate:* `{abcex_rate:.4f}`

üî∏ *CBR rate:* `{cbr_rate:.4f}` | *Spread:* `{cbr_spread:.4f}%`
üî∏ *ProFinance rate:* `{profinance_rate:.4f}` | *Spread:* `{profinance_spread:.4f}%`
üî∏ *Investing rate:* `{investing_rate:.4f}` | *Spread:* `{investing_spread:.4f}%`
    """
    print(message)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return message


@router.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /rates, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã.", reply_markup=keyboard)

@router.message(Command("rates"))
@router.message(lambda message: message.text == "üìâ Rates")
async def send_rates(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /rates"""
    rates = await get_all_rates()
    await message.answer(rates, parse_mode="Markdown")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    dp.include_router(router) 

    threading.Thread(target=investing_fetcher.run, daemon=True).start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
